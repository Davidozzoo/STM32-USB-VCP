
USB-VCP_LL_C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08000dfc  08000dfc  00010dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e54  08000e54  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000e54  08000e54  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e54  08000e54  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e54  08000e54  00010e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e58  08000e58  00010e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000e5c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000004  08000e60  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08000e60  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001549  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000664  00000000  00000000  00021576  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000290  00000000  00000000  00021be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000238  00000000  00000000  00021e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000153b4  00000000  00000000  000220a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002301  00000000  00000000  0003745c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007bc19  00000000  00000000  0003975d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5376  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000854  00000000  00000000  000b53f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000de4 	.word	0x08000de4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000de4 	.word	0x08000de4

0800014c <EN_RX_EP0>:
//Functions declarations.

//Enpoint 0 functions.

//Set endpoint 0 reception to VALID.
void EN_RX_EP0()	{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	USB_ENP0R = ((~USB_ENP0R) & 0x3000) | 0x8280;	}
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <EN_RX_EP0+0x24>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	43db      	mvns	r3, r3
 8000156:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800015a:	4a05      	ldr	r2, [pc, #20]	; (8000170 <EN_RX_EP0+0x24>)
 800015c:	f443 4302 	orr.w	r3, r3, #33280	; 0x8200
 8000160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000164:	6013      	str	r3, [r2, #0]
 8000166:	bf00      	nop
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr
 800016e:	bf00      	nop
 8000170:	40005c00 	.word	0x40005c00

08000174 <DIS_RX_EP0>:

//Set endpoint 0 reception to NAK.
void DIS_RX_EP0()	{
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
	USB_ENP0R = ((~USB_ENP0R) & 0x2000) | ((USB_ENP0R) & 0x1000) | 0x8280;	}
 8000178:	4b09      	ldr	r3, [pc, #36]	; (80001a0 <DIS_RX_EP0+0x2c>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	43db      	mvns	r3, r3
 800017e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8000182:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <DIS_RX_EP0+0x2c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800018a:	4313      	orrs	r3, r2
 800018c:	4a04      	ldr	r2, [pc, #16]	; (80001a0 <DIS_RX_EP0+0x2c>)
 800018e:	f443 4302 	orr.w	r3, r3, #33280	; 0x8200
 8000192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000196:	6013      	str	r3, [r2, #0]
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40005c00 	.word	0x40005c00

080001a4 <EN_TX_EP0>:
//Set endpoint 0 reception to DISABLED.
void OFF_RX_EP0()	{
	USB_ENP0R = ((USB_ENP0R) & 0x3000) | 0x8280;	}

//Set endpoint 0 transmission to VALID.
void EN_TX_EP0()	{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	USB_ENP0R = ((~USB_ENP0R) & 0x0030) | 0x8280;	}
 80001a8:	4b07      	ldr	r3, [pc, #28]	; (80001c8 <EN_TX_EP0+0x24>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	43db      	mvns	r3, r3
 80001ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80001b2:	4a05      	ldr	r2, [pc, #20]	; (80001c8 <EN_TX_EP0+0x24>)
 80001b4:	f443 4302 	orr.w	r3, r3, #33280	; 0x8200
 80001b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001bc:	6013      	str	r3, [r2, #0]
 80001be:	bf00      	nop
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	40005c00 	.word	0x40005c00

080001cc <DIS_TX_EP0>:
	
//Set endpoint 0 transmission to NAK.
void DIS_TX_EP0()	{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	USB_ENP0R = ((~USB_ENP0R) & 0x0020) | ((USB_ENP0R) & 0x0010) | 0x8280;	}
 80001d0:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <DIS_TX_EP0+0x2c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	43db      	mvns	r3, r3
 80001d6:	f003 0220 	and.w	r2, r3, #32
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <DIS_TX_EP0+0x2c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f003 0310 	and.w	r3, r3, #16
 80001e2:	4313      	orrs	r3, r2
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <DIS_TX_EP0+0x2c>)
 80001e6:	f443 4302 	orr.w	r3, r3, #33280	; 0x8200
 80001ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001ee:	6013      	str	r3, [r2, #0]
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40005c00 	.word	0x40005c00

080001fc <STALL_TX_EP0>:
	
//Set endpoint 0 transmission to STALL.
void STALL_TX_EP0()	{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	USB_ENP0R = ((USB_ENP0R) & 0x0020) | ((~USB_ENP0R) & 0x0010) | 0x8280;	}
 8000200:	4b09      	ldr	r3, [pc, #36]	; (8000228 <STALL_TX_EP0+0x2c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f003 0220 	and.w	r2, r3, #32
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <STALL_TX_EP0+0x2c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	43db      	mvns	r3, r3
 800020e:	f003 0310 	and.w	r3, r3, #16
 8000212:	4313      	orrs	r3, r2
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <STALL_TX_EP0+0x2c>)
 8000216:	f443 4302 	orr.w	r3, r3, #33280	; 0x8200
 800021a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800021e:	6013      	str	r3, [r2, #0]
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	40005c00 	.word	0x40005c00

0800022c <SET_DATA0_EP0>:
//Set endpoint 0 transmission to DISABLE.		
void OFF_TX_EP0()	{
	USB_ENP0R = ((USB_ENP0R) & 0x0030) | 0x8280;	}

//Set transmission packet PID to DATA0.
void SET_DATA0_EP0()	{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	USB_ENP0R = ((USB_ENP0R) & 0x0040) | 0x8280;	}
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <SET_DATA0_EP0+0x20>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000238:	4a04      	ldr	r2, [pc, #16]	; (800024c <SET_DATA0_EP0+0x20>)
 800023a:	f443 4302 	orr.w	r3, r3, #33280	; 0x8200
 800023e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000242:	6013      	str	r3, [r2, #0]
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40005c00 	.word	0x40005c00

08000250 <SET_DATA1_EP0>:

//Set transmission packet PID to DATA1.
void SET_DATA1_EP0()	{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	USB_ENP0R = ((~USB_ENP0R) & 0x0040) | 0x8280;	}
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <SET_DATA1_EP0+0x24>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	43db      	mvns	r3, r3
 800025a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800025e:	4a05      	ldr	r2, [pc, #20]	; (8000274 <SET_DATA1_EP0+0x24>)
 8000260:	f443 4302 	orr.w	r3, r3, #33280	; 0x8200
 8000264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000268:	6013      	str	r3, [r2, #0]
 800026a:	bf00      	nop
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40005c00 	.word	0x40005c00

08000278 <Send_EP0>:

//Send a packet on endpoint 0. Max packet lenght 64 byte.
void Send_EP0(const uint8_t* data, uint32_t len)		{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
	uint16_t* p_mem_16 = (uint16_t*) USB_TX0_BASE_32;	//Point to trasmission buffer endpoint 0.
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <Send_EP0+0x58>)
 8000284:	617b      	str	r3, [r7, #20]
	uint16_t* data_16 = (uint16_t*) data;				//Point to data transmission buffer.
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	613b      	str	r3, [r7, #16]
	uint32_t  ii=0;	
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
	for(ii=0;ii<len;)	{								//Copy data from data buffer to endpoint 0 buffer. Note: endpoint 0 buffer in PMA is 16 bit wide, not 32.
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	e00c      	b.n	80002ae <Send_EP0+0x36>
		*p_mem_16 = *data_16;
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	881a      	ldrh	r2, [r3, #0]
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	801a      	strh	r2, [r3, #0]
		p_mem_16 += 2;
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	3304      	adds	r3, #4
 80002a0:	617b      	str	r3, [r7, #20]
		data_16 += 1;
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	3302      	adds	r3, #2
 80002a6:	613b      	str	r3, [r7, #16]
		ii+=2;			}
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	3302      	adds	r3, #2
 80002ac:	60fb      	str	r3, [r7, #12]
	for(ii=0;ii<len;)	{								//Copy data from data buffer to endpoint 0 buffer. Note: endpoint 0 buffer in PMA is 16 bit wide, not 32.
 80002ae:	68fa      	ldr	r2, [r7, #12]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d3ee      	bcc.n	8000294 <Send_EP0+0x1c>
	USB_COUNT0_TX = len;								//Set the number of byte to transmit.
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <Send_EP0+0x5c>)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	6013      	str	r3, [r2, #0]
	USB_TRANSMITTED_EP0=0;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <Send_EP0+0x60>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
	EN_TX_EP0();		}
 80002c2:	f7ff ff6f 	bl	80001a4 <EN_TX_EP0>
 80002c6:	bf00      	nop
 80002c8:	3718      	adds	r7, #24
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40006100 	.word	0x40006100
 80002d4:	40006004 	.word	0x40006004
 80002d8:	20000025 	.word	0x20000025

080002dc <EN_RX_EP1>:


//Enpoint 1 functions.

//Set endpoint 1 reception to VALID.
void EN_RX_EP1()	{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	USB_ENP1R = ((~USB_ENP1R) & 0x3000) | 0x8081;	}
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <EN_RX_EP1+0x24>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	43db      	mvns	r3, r3
 80002e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80002ea:	4a05      	ldr	r2, [pc, #20]	; (8000300 <EN_RX_EP1+0x24>)
 80002ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002f0:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 80002f4:	6013      	str	r3, [r2, #0]
 80002f6:	bf00      	nop
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40005c04 	.word	0x40005c04

08000304 <DIS_RX_EP1>:

//Set endpoint 1 reception to NAK.
void DIS_RX_EP1()	{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	USB_ENP1R = ((~USB_ENP1R) & 0x2000) | ((USB_ENP1R) & 0x1000) | 0x8081;	}
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <DIS_RX_EP1+0x2c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	43db      	mvns	r3, r3
 800030e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8000312:	4b07      	ldr	r3, [pc, #28]	; (8000330 <DIS_RX_EP1+0x2c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800031a:	4313      	orrs	r3, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <DIS_RX_EP1+0x2c>)
 800031e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000322:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 8000326:	6013      	str	r3, [r2, #0]
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40005c04 	.word	0x40005c04

08000334 <EN_TX_EP1>:

//Set endpoint 1 transmission to VALID.
void EN_TX_EP1()	{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	USB_ENP1R = ((~USB_ENP1R) & 0x0030) | 0x8081;	}
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <EN_TX_EP1+0x24>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	43db      	mvns	r3, r3
 800033e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <EN_TX_EP1+0x24>)
 8000344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000348:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 800034c:	6013      	str	r3, [r2, #0]
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40005c04 	.word	0x40005c04

0800035c <DIS_TX_EP1>:
	
//Set endpoint 1 transmission to NAK.
void DIS_TX_EP1()	{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	USB_ENP1R = ((~USB_ENP1R) & 0x0020) | ((USB_ENP1R) & 0x0010) | 0x8081;	}
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <DIS_TX_EP1+0x2c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	43db      	mvns	r3, r3
 8000366:	f003 0220 	and.w	r2, r3, #32
 800036a:	4b07      	ldr	r3, [pc, #28]	; (8000388 <DIS_TX_EP1+0x2c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f003 0310 	and.w	r3, r3, #16
 8000372:	4313      	orrs	r3, r2
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <DIS_TX_EP1+0x2c>)
 8000376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037a:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 800037e:	6013      	str	r3, [r2, #0]
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40005c04 	.word	0x40005c04

0800038c <Send_EP1>:

//Send a packet on endpoint 1. Max packet lenght 64 byte.
void Send_EP1(uint8_t* data, uint32_t len)		{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
	uint16_t* p_mem_16 = (uint16_t*) USB_TX1_BASE_32;	//Point to trasmission buffer endpoint 1.
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <Send_EP1+0x58>)
 8000398:	617b      	str	r3, [r7, #20]
	uint16_t* data_16 = (uint16_t*) data;				//Point to data transmission buffer.
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	613b      	str	r3, [r7, #16]
	uint32_t  ii=0;	
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
	for(ii=0;ii<len;)	{								//Copy data from data buffer to endpoint 1 buffer. Note: endpoint 1 buffer in PMA is 16 bit wide, not 32.
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e00c      	b.n	80003c2 <Send_EP1+0x36>
		*p_mem_16 = *data_16;
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	881a      	ldrh	r2, [r3, #0]
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	801a      	strh	r2, [r3, #0]
		p_mem_16 += 2;
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	3304      	adds	r3, #4
 80003b4:	617b      	str	r3, [r7, #20]
		data_16 += 1;
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	3302      	adds	r3, #2
 80003ba:	613b      	str	r3, [r7, #16]
		ii+=2;			}
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	3302      	adds	r3, #2
 80003c0:	60fb      	str	r3, [r7, #12]
	for(ii=0;ii<len;)	{								//Copy data from data buffer to endpoint 1 buffer. Note: endpoint 1 buffer in PMA is 16 bit wide, not 32.
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d3ee      	bcc.n	80003a8 <Send_EP1+0x1c>
	USB_COUNT1_TX = len;								//Set the number of byte to transmit.
 80003ca:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <Send_EP1+0x5c>)
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	6013      	str	r3, [r2, #0]
	USB_TRANSMITTED_EP1=0;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <Send_EP1+0x60>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
	EN_TX_EP1();		}
 80003d6:	f7ff ffad 	bl	8000334 <EN_TX_EP1>
 80003da:	bf00      	nop
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40006200 	.word	0x40006200
 80003e8:	40006014 	.word	0x40006014
 80003ec:	20000027 	.word	0x20000027

080003f0 <Send_EP1_Jumbo>:

//Send a packet on endpoint 1. Max packet lenght 4294967296 byte.
void Send_EP1_Jumbo(uint8_t* data, uint32_t len)	{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
	if(len<32)	{											//If the packet is not bigger than 32 byte use the standard function Send_EP1.
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	2b1f      	cmp	r3, #31
 80003fe:	d807      	bhi.n	8000410 <Send_EP1_Jumbo+0x20>
		N_JUMBO_SUBPACKETS=1;
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <Send_EP1_Jumbo+0x68>)
 8000402:	2201      	movs	r2, #1
 8000404:	601a      	str	r2, [r3, #0]
		Send_EP1(data,len);
 8000406:	6839      	ldr	r1, [r7, #0]
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f7ff ffbf 	bl	800038c <Send_EP1>
		return;}	
 800040e:	e020      	b.n	8000452 <Send_EP1_Jumbo+0x62>
	uint32_t len_32 = len%32;								//Variable to check if the Jumbo packet size is a multiple o 32 byte and to calculate the last subpacket size.
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	f003 031f 	and.w	r3, r3, #31
 8000416:	60fb      	str	r3, [r7, #12]
	N_JUMBO_SUBPACKETS = len/32;							//Calculation of number of packet to send.			
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	095b      	lsrs	r3, r3, #5
 800041c:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <Send_EP1_Jumbo+0x68>)
 800041e:	6013      	str	r3, [r2, #0]
	if((len_32) != 0) 	{
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d008      	beq.n	8000438 <Send_EP1_Jumbo+0x48>
		N_JUMBO_SUBPACKETS++;								//If the Jumbo packet size is not a multiple of 32 add 1 packet of the remaining data.
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <Send_EP1_Jumbo+0x68>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3301      	adds	r3, #1
 800042c:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <Send_EP1_Jumbo+0x68>)
 800042e:	6013      	str	r3, [r2, #0]
		JUMBO_LAST_SUBPACKET_SIZE=len_32;}
 8000430:	4a0a      	ldr	r2, [pc, #40]	; (800045c <Send_EP1_Jumbo+0x6c>)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	6013      	str	r3, [r2, #0]
 8000436:	e002      	b.n	800043e <Send_EP1_Jumbo+0x4e>
	else				{ 
		JUMBO_LAST_SUBPACKET_SIZE=32;	}
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <Send_EP1_Jumbo+0x6c>)
 800043a:	2220      	movs	r2, #32
 800043c:	601a      	str	r2, [r3, #0]
	JUMBO_BUFF_ADDR = (uint8_t*) data;						//Point JUMBO_BUFF_ADDR	to the data trasmission buffer.
 800043e:	4a08      	ldr	r2, [pc, #32]	; (8000460 <Send_EP1_Jumbo+0x70>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6013      	str	r3, [r2, #0]
	Send_EP1(data,32);										//Send first packet of the Jumpo packet.
 8000444:	2120      	movs	r1, #32
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff ffa0 	bl	800038c <Send_EP1>
	N_JUMBO_SUBPACKETS_TXED=1;		}						//Set the number of transmitted packets to 1.									
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <Send_EP1_Jumbo+0x74>)
 800044e:	2201      	movs	r2, #1
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	2000002c 	.word	0x2000002c
 800045c:	20000038 	.word	0x20000038
 8000460:	20000034 	.word	0x20000034
 8000464:	20000030 	.word	0x20000030

08000468 <Read_EP1>:

//Read a packet received on endpoint 1 and enable endpoint 1 to receive a new packet. The packet will be copied in the "Received_Data" array, and the leght of the packet will be written in the "len" variable.
void Read_EP1(uint8_t* Received_data, uint32_t* len)		{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
	uint32_t N_Byte_Received = USB_COUNT1_RX & 0x03FF;	//Check the number of byte received
 8000472:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <Read_EP1+0x80>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800047a:	60fb      	str	r3, [r7, #12]
	uint32_t ii=0;	
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
	uint8_t* p_mem_8 = (uint8_t*) USB_RX1_BASE_32;
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <Read_EP1+0x84>)
 8000482:	613b      	str	r3, [r7, #16]
	USB_RECEIVED_EP1 = 0;								//Reset flag EP1 reception.
 8000484:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <Read_EP1+0x88>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
	for(ii=0;ii<N_Byte_Received;)	{					//Copy the received data from endpoint 1 reception buffer to "Received_data" buffer. Note: endpoint 1 buffer is 16 bit wide, not 32.
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	e01b      	b.n	80004c8 <Read_EP1+0x60>
		Received_data[ii] = *p_mem_8;
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	4413      	add	r3, r2
 8000496:	693a      	ldr	r2, [r7, #16]
 8000498:	7812      	ldrb	r2, [r2, #0]
 800049a:	701a      	strb	r2, [r3, #0]
		ii++;
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	3301      	adds	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
		p_mem_8++;
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	3301      	adds	r3, #1
 80004a6:	613b      	str	r3, [r7, #16]
		if(ii==N_Byte_Received) {break;}
 80004a8:	697a      	ldr	r2, [r7, #20]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d010      	beq.n	80004d2 <Read_EP1+0x6a>
		Received_data[ii] = *p_mem_8;
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	4413      	add	r3, r2
 80004b6:	693a      	ldr	r2, [r7, #16]
 80004b8:	7812      	ldrb	r2, [r2, #0]
 80004ba:	701a      	strb	r2, [r3, #0]
		ii++;
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	3301      	adds	r3, #1
 80004c0:	617b      	str	r3, [r7, #20]
		p_mem_8+=3;					}
 80004c2:	693b      	ldr	r3, [r7, #16]
 80004c4:	3303      	adds	r3, #3
 80004c6:	613b      	str	r3, [r7, #16]
	for(ii=0;ii<N_Byte_Received;)	{					//Copy the received data from endpoint 1 reception buffer to "Received_data" buffer. Note: endpoint 1 buffer is 16 bit wide, not 32.
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d3df      	bcc.n	8000490 <Read_EP1+0x28>
 80004d0:	e000      	b.n	80004d4 <Read_EP1+0x6c>
		if(ii==N_Byte_Received) {break;}
 80004d2:	bf00      	nop
	*len=N_Byte_Received;								//Copy the lenght of the received packet in the variable *len.
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	601a      	str	r2, [r3, #0]
	EN_RX_EP1();								}		//Enable the endpoint 1 reception buffer to receive any new packet.
 80004da:	f7ff feff 	bl	80002dc <EN_RX_EP1>
 80004de:	bf00      	nop
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	4000601c 	.word	0x4000601c
 80004ec:	40006180 	.word	0x40006180
 80004f0:	20000026 	.word	0x20000026

080004f4 <EN_RX_EP2>:


//Enpoint 2 functions.

//Set endpoint 2 reception to VALID.
void EN_RX_EP2()	{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	USB_ENP2R = ((~USB_ENP2R) & 0x3000) | 0x8682;	}
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <EN_RX_EP2+0x24>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	43db      	mvns	r3, r3
 80004fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8000502:	4a05      	ldr	r2, [pc, #20]	; (8000518 <EN_RX_EP2+0x24>)
 8000504:	f443 4306 	orr.w	r3, r3, #34304	; 0x8600
 8000508:	f043 0382 	orr.w	r3, r3, #130	; 0x82
 800050c:	6013      	str	r3, [r2, #0]
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40005c08 	.word	0x40005c08

0800051c <DIS_RX_EP2>:

//Set endpoint 2 reception to NAK.
void DIS_RX_EP2()	{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
	USB_ENP2R = ((~USB_ENP2R) & 0x2000) | ((USB_ENP2R) & 0x1000) | 0x8682;	}
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <DIS_RX_EP2+0x2c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	43db      	mvns	r3, r3
 8000526:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <DIS_RX_EP2+0x2c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000532:	4313      	orrs	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <DIS_RX_EP2+0x2c>)
 8000536:	f443 4306 	orr.w	r3, r3, #34304	; 0x8600
 800053a:	f043 0382 	orr.w	r3, r3, #130	; 0x82
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40005c08 	.word	0x40005c08

0800054c <DIS_TX_EP2>:
//Set endpoint 2 transmission to VALID.
void EN_TX_EP2()	{
	USB_ENP2R = ((~USB_ENP2R) & 0x0030) | 0x8682;	}
	
//Set endpoint 2 transmission to NAK.
void DIS_TX_EP2()	{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
	USB_ENP2R = ((~USB_ENP2R) & 0x0020) | ((USB_ENP2R) & 0x0010) | 0x8682;	}
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <DIS_TX_EP2+0x2c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	43db      	mvns	r3, r3
 8000556:	f003 0220 	and.w	r2, r3, #32
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <DIS_TX_EP2+0x2c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f003 0310 	and.w	r3, r3, #16
 8000562:	4313      	orrs	r3, r2
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <DIS_TX_EP2+0x2c>)
 8000566:	f443 4306 	orr.w	r3, r3, #34304	; 0x8600
 800056a:	f043 0382 	orr.w	r3, r3, #130	; 0x82
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40005c08 	.word	0x40005c08

0800057c <USB_MANAGEMENT>:


//Management functions.

//Manage control tranfers on endpoint 0.
void USB_MANAGEMENT()	{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
		if(USB_RECEIVED_EP0)	{												//If a packet has been received on endpoint 0..
 8000582:	4ba3      	ldr	r3, [pc, #652]	; (8000810 <USB_MANAGEMENT+0x294>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	f000 8132 	beq.w	80007f2 <USB_MANAGEMENT+0x276>
			USB_RECEIVED_EP0 = 0;												//Reset reception flag endpoint 0.
 800058e:	4ba0      	ldr	r3, [pc, #640]	; (8000810 <USB_MANAGEMENT+0x294>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
			
			uint8_t* p_mem_8 = (uint8_t*) USB_RX0_BASE_32;						//Point to reception buffer endpoint 0.
 8000594:	4b9f      	ldr	r3, [pc, #636]	; (8000814 <USB_MANAGEMENT+0x298>)
 8000596:	607b      	str	r3, [r7, #4]
			
			if( p_mem_8[0]==0x80 && p_mem_8[1]==0x06 ) 	{						//If a descriptor has been requested..
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b80      	cmp	r3, #128	; 0x80
 800059e:	d15c      	bne.n	800065a <USB_MANAGEMENT+0xde>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b06      	cmp	r3, #6
 80005a8:	d157      	bne.n	800065a <USB_MANAGEMENT+0xde>
				
				if(p_mem_8[5]==0x01)			{								//If REQUEST Device_Descriptor..
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3305      	adds	r3, #5
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d10d      	bne.n	80005d0 <USB_MANAGEMENT+0x54>
					Send_EP0(Device_Descriptor,18);								//Send the Device_Descriptor.
 80005b4:	2112      	movs	r1, #18
 80005b6:	4898      	ldr	r0, [pc, #608]	; (8000818 <USB_MANAGEMENT+0x29c>)
 80005b8:	f7ff fe5e 	bl	8000278 <Send_EP0>
					while(USB_TRANSMITTED_EP0==0)	{}							//Wait that the packet has been completely transmitted.
 80005bc:	bf00      	nop
 80005be:	4b97      	ldr	r3, [pc, #604]	; (800081c <USB_MANAGEMENT+0x2a0>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0fa      	beq.n	80005be <USB_MANAGEMENT+0x42>
					USB_TRANSMITTED_EP0=0;		}								//Reset flag trasmission complete. 
 80005c8:	4b94      	ldr	r3, [pc, #592]	; (800081c <USB_MANAGEMENT+0x2a0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
				if(p_mem_8[5]==0x01)			{								//If REQUEST Device_Descriptor..
 80005ce:	e10d      	b.n	80007ec <USB_MANAGEMENT+0x270>
				
				else if(p_mem_8[5]==0x02)		{								//If REQUEST Configuration_Descriptor..
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3305      	adds	r3, #5
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d136      	bne.n	8000648 <USB_MANAGEMENT+0xcc>
					if(p_mem_8[12]==0x09 && p_mem_8[13]==0x00)	{				//If requested the partial Configuration_Descriptor..
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	330c      	adds	r3, #12
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b09      	cmp	r3, #9
 80005e2:	d112      	bne.n	800060a <USB_MANAGEMENT+0x8e>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	330d      	adds	r3, #13
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d10d      	bne.n	800060a <USB_MANAGEMENT+0x8e>
						Send_EP0(Configuration_Descriptor,9);					//Send the partial Configuration_Descriptor.
 80005ee:	2109      	movs	r1, #9
 80005f0:	488b      	ldr	r0, [pc, #556]	; (8000820 <USB_MANAGEMENT+0x2a4>)
 80005f2:	f7ff fe41 	bl	8000278 <Send_EP0>
						while(USB_TRANSMITTED_EP0==0)	{}						//Wait that the packet has been completely transmitted.
 80005f6:	bf00      	nop
 80005f8:	4b88      	ldr	r3, [pc, #544]	; (800081c <USB_MANAGEMENT+0x2a0>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0fa      	beq.n	80005f8 <USB_MANAGEMENT+0x7c>
						USB_TRANSMITTED_EP0=0;	}								//Reset flag trasmission complete. 
 8000602:	4b86      	ldr	r3, [pc, #536]	; (800081c <USB_MANAGEMENT+0x2a0>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
				if(p_mem_8[5]==0x01)			{								//If REQUEST Device_Descriptor..
 8000608:	e0f0      	b.n	80007ec <USB_MANAGEMENT+0x270>
					else					{									//If requested the complete Configuration_Descriptor..
						SET_DATA1_EP0();										//Set transmission packet PID to DATA1.
 800060a:	f7ff fe21 	bl	8000250 <SET_DATA1_EP0>
						Send_EP0(Configuration_Descriptor_0,64);				//Send the first part of the Configuration_Descriptor.
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	4883      	ldr	r0, [pc, #524]	; (8000820 <USB_MANAGEMENT+0x2a4>)
 8000612:	f7ff fe31 	bl	8000278 <Send_EP0>
						while(USB_TRANSMITTED_EP0==0)	{}						//Wait that the packet has been completely transmitted.
 8000616:	bf00      	nop
 8000618:	4b80      	ldr	r3, [pc, #512]	; (800081c <USB_MANAGEMENT+0x2a0>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0fa      	beq.n	8000618 <USB_MANAGEMENT+0x9c>
						USB_TRANSMITTED_EP0=0;									//Reset flag trasmission complete. 
 8000622:	4b7e      	ldr	r3, [pc, #504]	; (800081c <USB_MANAGEMENT+0x2a0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
						SET_DATA0_EP0();										//Set transmission packet PID to DATA0.
 8000628:	f7ff fe00 	bl	800022c <SET_DATA0_EP0>
						Send_EP0(Configuration_Descriptor_2,3);					//Send the second part of the Configuration_Descriptor.
 800062c:	2103      	movs	r1, #3
 800062e:	487d      	ldr	r0, [pc, #500]	; (8000824 <USB_MANAGEMENT+0x2a8>)
 8000630:	f7ff fe22 	bl	8000278 <Send_EP0>
						while(USB_TRANSMITTED_EP0==0)	{}						//Wait that the packet has been completely transmitted.
 8000634:	bf00      	nop
 8000636:	4b79      	ldr	r3, [pc, #484]	; (800081c <USB_MANAGEMENT+0x2a0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0fa      	beq.n	8000636 <USB_MANAGEMENT+0xba>
						USB_TRANSMITTED_EP0=0;	}	}							//Reset flag trasmission complete.  
 8000640:	4b76      	ldr	r3, [pc, #472]	; (800081c <USB_MANAGEMENT+0x2a0>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
				if(p_mem_8[5]==0x01)			{								//If REQUEST Device_Descriptor..
 8000646:	e0d1      	b.n	80007ec <USB_MANAGEMENT+0x270>
										
				else if(p_mem_8[5]==0x06)		{								//If REQUEST DEVICE_QUALIFIER_DESCIPTOR..
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3305      	adds	r3, #5
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b06      	cmp	r3, #6
 8000650:	f040 80cc 	bne.w	80007ec <USB_MANAGEMENT+0x270>
					STALL_TX_EP0();				}								//Send REQUEST_ERROR (Because USB1.1 doesn't support that).
 8000654:	f7ff fdd2 	bl	80001fc <STALL_TX_EP0>
				if(p_mem_8[5]==0x01)			{								//If REQUEST Device_Descriptor..
 8000658:	e0c8      	b.n	80007ec <USB_MANAGEMENT+0x270>
				}	
						
			else if ( p_mem_8[0]==0x00 && p_mem_8[1]==0x05 )	{				//If REQUEST SET_ADDRESS..
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d11c      	bne.n	800069c <USB_MANAGEMENT+0x120>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3301      	adds	r3, #1
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b05      	cmp	r3, #5
 800066a:	d117      	bne.n	800069c <USB_MANAGEMENT+0x120>
				Send_EP0(0,0);													//Send ACK.
 800066c:	2100      	movs	r1, #0
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff fe02 	bl	8000278 <Send_EP0>
				while(USB_TRANSMITTED_EP0==0)	{}								//Wait that the ACK has been sent.
 8000674:	bf00      	nop
 8000676:	4b69      	ldr	r3, [pc, #420]	; (800081c <USB_MANAGEMENT+0x2a0>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d0fa      	beq.n	8000676 <USB_MANAGEMENT+0xfa>
				USB_TRANSMITTED_EP0=0;											//Reset flag trasmission complete. 
 8000680:	4b66      	ldr	r3, [pc, #408]	; (800081c <USB_MANAGEMENT+0x2a0>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
				USB_DADDR |= (p_mem_8[4] & 0x7F);								//Set the received address in USB peripheral.
 8000686:	4b68      	ldr	r3, [pc, #416]	; (8000828 <USB_MANAGEMENT+0x2ac>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3304      	adds	r3, #4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000694:	4964      	ldr	r1, [pc, #400]	; (8000828 <USB_MANAGEMENT+0x2ac>)
 8000696:	4313      	orrs	r3, r2
 8000698:	600b      	str	r3, [r1, #0]
 800069a:	e0a8      	b.n	80007ee <USB_MANAGEMENT+0x272>
			}
			
			else if ( p_mem_8[0]==0x00 && p_mem_8[1]==0x09 )	{				//If REQUEST SET_CONFIGURATION..
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d112      	bne.n	80006ca <USB_MANAGEMENT+0x14e>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3301      	adds	r3, #1
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b09      	cmp	r3, #9
 80006ac:	d10d      	bne.n	80006ca <USB_MANAGEMENT+0x14e>
				Send_EP0(0,0);													//Send ACK.
 80006ae:	2100      	movs	r1, #0
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff fde1 	bl	8000278 <Send_EP0>
				while(USB_TRANSMITTED_EP0==0)	{}								//Wait that the ACK has been sent.
 80006b6:	bf00      	nop
 80006b8:	4b58      	ldr	r3, [pc, #352]	; (800081c <USB_MANAGEMENT+0x2a0>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0fa      	beq.n	80006b8 <USB_MANAGEMENT+0x13c>
				USB_TRANSMITTED_EP0=0;							}				//Reset flag trasmission complete. 
 80006c2:	4b56      	ldr	r3, [pc, #344]	; (800081c <USB_MANAGEMENT+0x2a0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	e091      	b.n	80007ee <USB_MANAGEMENT+0x272>
				
			else if ( p_mem_8[0]==0xA1 && p_mem_8[1]==0x21 )	{				//If REQUEST GET_LINE_CODING..
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2ba1      	cmp	r3, #161	; 0xa1
 80006d0:	d112      	bne.n	80006f8 <USB_MANAGEMENT+0x17c>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3301      	adds	r3, #1
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b21      	cmp	r3, #33	; 0x21
 80006da:	d10d      	bne.n	80006f8 <USB_MANAGEMENT+0x17c>
				Send_EP0(Line_Coding,7);										//Send the LINE_CODING.
 80006dc:	2107      	movs	r1, #7
 80006de:	4853      	ldr	r0, [pc, #332]	; (800082c <USB_MANAGEMENT+0x2b0>)
 80006e0:	f7ff fdca 	bl	8000278 <Send_EP0>
				while(USB_TRANSMITTED_EP0==0)	{}								//Wait that the packet has been completely transmitted.
 80006e4:	bf00      	nop
 80006e6:	4b4d      	ldr	r3, [pc, #308]	; (800081c <USB_MANAGEMENT+0x2a0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0fa      	beq.n	80006e6 <USB_MANAGEMENT+0x16a>
				USB_TRANSMITTED_EP0=0;							}				//Reset flag trasmission complete.  
 80006f0:	4b4a      	ldr	r3, [pc, #296]	; (800081c <USB_MANAGEMENT+0x2a0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e07a      	b.n	80007ee <USB_MANAGEMENT+0x272>
			
			else if ( p_mem_8[0]==0x21 && p_mem_8[1]==0x22 )	{				//If REQUEST SET_CONTROL_LINE_STATE..
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b21      	cmp	r3, #33	; 0x21
 80006fe:	d11e      	bne.n	800073e <USB_MANAGEMENT+0x1c2>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3301      	adds	r3, #1
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b22      	cmp	r3, #34	; 0x22
 8000708:	d119      	bne.n	800073e <USB_MANAGEMENT+0x1c2>
				Control_Line_State[0] = p_mem_8[4];								//Set the received CONTROL_LINE_STATE in USB peripheral.
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3304      	adds	r3, #4
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b47      	ldr	r3, [pc, #284]	; (8000830 <USB_MANAGEMENT+0x2b4>)
 8000714:	801a      	strh	r2, [r3, #0]
				Control_Line_State[1] = p_mem_8[5];								//Set the received CONTROL_LINE_STATE in USB peripheral.
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3305      	adds	r3, #5
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b44      	ldr	r3, [pc, #272]	; (8000830 <USB_MANAGEMENT+0x2b4>)
 8000720:	805a      	strh	r2, [r3, #2]
				Send_EP0(0,0);													//Send ACK.
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff fda7 	bl	8000278 <Send_EP0>
				while(USB_TRANSMITTED_EP0==0)	{}								//Wait that the ACK has been sent.
 800072a:	bf00      	nop
 800072c:	4b3b      	ldr	r3, [pc, #236]	; (800081c <USB_MANAGEMENT+0x2a0>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0fa      	beq.n	800072c <USB_MANAGEMENT+0x1b0>
				USB_TRANSMITTED_EP0=0;							}				//Reset flag trasmission complete.
 8000736:	4b39      	ldr	r3, [pc, #228]	; (800081c <USB_MANAGEMENT+0x2a0>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	e057      	b.n	80007ee <USB_MANAGEMENT+0x272>
			
			else if ( p_mem_8[0]==0x21 && p_mem_8[1]==0x20 )	{				//If REQUEST SET_LINE_CODING..
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b21      	cmp	r3, #33	; 0x21
 8000744:	d13b      	bne.n	80007be <USB_MANAGEMENT+0x242>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3301      	adds	r3, #1
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b20      	cmp	r3, #32
 800074e:	d136      	bne.n	80007be <USB_MANAGEMENT+0x242>
				EN_RX_EP0();													//Enable reception on endpoint 0.
 8000750:	f7ff fcfc 	bl	800014c <EN_RX_EP0>
				while(USB_RECEIVED_EP0==0) {};									//Wait the reception of the DATA packet.
 8000754:	bf00      	nop
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <USB_MANAGEMENT+0x294>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0fa      	beq.n	8000756 <USB_MANAGEMENT+0x1da>
				USB_RECEIVED_EP0=0;												//Reset flag reception complete.
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <USB_MANAGEMENT+0x294>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
				Line_Coding[0] = p_mem_8[0];									//Set the received LINE_CODING in USB peripheral
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	4b30      	ldr	r3, [pc, #192]	; (800082c <USB_MANAGEMENT+0x2b0>)
 800076c:	701a      	strb	r2, [r3, #0]
				Line_Coding[1] = p_mem_8[1];                                    //Set the received LINE_CODING in USB peripheral
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	785a      	ldrb	r2, [r3, #1]
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <USB_MANAGEMENT+0x2b0>)
 8000774:	705a      	strb	r2, [r3, #1]
				Line_Coding[2] = p_mem_8[4];                                    //Set the received LINE_CODING in USB peripheral
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791a      	ldrb	r2, [r3, #4]
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <USB_MANAGEMENT+0x2b0>)
 800077c:	709a      	strb	r2, [r3, #2]
				Line_Coding[3] = p_mem_8[5];                                    //Set the received LINE_CODING in USB peripheral
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	795a      	ldrb	r2, [r3, #5]
 8000782:	4b2a      	ldr	r3, [pc, #168]	; (800082c <USB_MANAGEMENT+0x2b0>)
 8000784:	70da      	strb	r2, [r3, #3]
				Line_Coding[4] = p_mem_8[8];                                    //Set the received LINE_CODING in USB peripheral
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	7a1a      	ldrb	r2, [r3, #8]
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <USB_MANAGEMENT+0x2b0>)
 800078c:	711a      	strb	r2, [r3, #4]
				Line_Coding[5] = p_mem_8[9];                                    //Set the received LINE_CODING in USB peripheral
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	7a5a      	ldrb	r2, [r3, #9]
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <USB_MANAGEMENT+0x2b0>)
 8000794:	715a      	strb	r2, [r3, #5]
				Line_Coding[6] = p_mem_8[12];                                   //Set the received LINE_CODING in USB peripheral
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7b1a      	ldrb	r2, [r3, #12]
 800079a:	4b24      	ldr	r3, [pc, #144]	; (800082c <USB_MANAGEMENT+0x2b0>)
 800079c:	719a      	strb	r2, [r3, #6]
				SET_DATA1_EP0();												//Set transmission packet PID to DATA1.
 800079e:	f7ff fd57 	bl	8000250 <SET_DATA1_EP0>
				Send_EP0(0,0);													//Send ACK.
 80007a2:	2100      	movs	r1, #0
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff fd67 	bl	8000278 <Send_EP0>
				while(USB_TRANSMITTED_EP0==0)	{}								//Wait that the ACK has been sent.
 80007aa:	bf00      	nop
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <USB_MANAGEMENT+0x2a0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0fa      	beq.n	80007ac <USB_MANAGEMENT+0x230>
				USB_TRANSMITTED_EP0=0;							}				//Reset flag trasmission complete.
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <USB_MANAGEMENT+0x2a0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	e017      	b.n	80007ee <USB_MANAGEMENT+0x272>

			else if ( p_mem_8[0]==0x02 && p_mem_8[1]==0x01 )	{				//If REQUEST CLEAR_FEATURE..
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d113      	bne.n	80007ee <USB_MANAGEMENT+0x272>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3301      	adds	r3, #1
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10e      	bne.n	80007ee <USB_MANAGEMENT+0x272>
				Send_EP0(0,0);                                                  //Send ACK.
 80007d0:	2100      	movs	r1, #0
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fd50 	bl	8000278 <Send_EP0>
				while(USB_TRANSMITTED_EP0==0)	{}								//Wait that the ACK has been sent.
 80007d8:	bf00      	nop
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <USB_MANAGEMENT+0x2a0>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0fa      	beq.n	80007da <USB_MANAGEMENT+0x25e>
				USB_TRANSMITTED_EP0=0;							}				//Reset flag trasmission complete.
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <USB_MANAGEMENT+0x2a0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	e000      	b.n	80007ee <USB_MANAGEMENT+0x272>
				if(p_mem_8[5]==0x01)			{								//If REQUEST Device_Descriptor..
 80007ec:	bf00      	nop
			
			EN_RX_EP0();														//Enable reception on endpoint 0.
 80007ee:	f7ff fcad 	bl	800014c <EN_RX_EP0>
		}							//END EP0.
		
		if(USB_RECEIVED_EP2)	{												//If a packet has been received on endpoint 1..
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <USB_MANAGEMENT+0x2b8>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d004      	beq.n	8000806 <USB_MANAGEMENT+0x28a>
			USB_RECEIVED_EP2 = 0;												//Reset flag reception endpoint 2.
 80007fc:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <USB_MANAGEMENT+0x2b8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
			EN_RX_EP2();		}												//Enable reception on endpoint 0.
 8000802:	f7ff fe77 	bl	80004f4 <EN_RX_EP2>
	
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000024 	.word	0x20000024
 8000814:	40006080 	.word	0x40006080
 8000818:	08000dfc 	.word	0x08000dfc
 800081c:	20000025 	.word	0x20000025
 8000820:	08000e10 	.word	0x08000e10
 8000824:	08000e50 	.word	0x08000e50
 8000828:	40005c4c 	.word	0x40005c4c
 800082c:	2000003c 	.word	0x2000003c
 8000830:	20000044 	.word	0x20000044
 8000834:	20000028 	.word	0x20000028

08000838 <Manage_EP1_Jumbo>:

//Function used to send the remaining subpackets of the Jumbo packet. Automatically called in interrupt when the previous packet has been completely transmitted.
void Manage_EP1_Jumbo()			{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	JUMBO_BUFF_ADDR+=32;																			//Point to the next subpacket.
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <Manage_EP1_Jumbo+0x44>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3320      	adds	r3, #32
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <Manage_EP1_Jumbo+0x44>)
 8000844:	6013      	str	r3, [r2, #0]
	if(N_JUMBO_SUBPACKETS>1)	{Send_EP1((uint8_t*)JUMBO_BUFF_ADDR,32);}							//If not the last packet send a subpacket of 32 bytes.
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <Manage_EP1_Jumbo+0x48>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d906      	bls.n	800085c <Manage_EP1_Jumbo+0x24>
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <Manage_EP1_Jumbo+0x44>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2120      	movs	r1, #32
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fd99 	bl	800038c <Send_EP1>
 800085a:	e007      	b.n	800086c <Manage_EP1_Jumbo+0x34>
	else						{Send_EP1((uint8_t*)JUMBO_BUFF_ADDR,JUMBO_LAST_SUBPACKET_SIZE);}	//If the last packet send a packet with the remaining bytes.	
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <Manage_EP1_Jumbo+0x44>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <Manage_EP1_Jumbo+0x4c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	4610      	mov	r0, r2
 8000868:	f7ff fd90 	bl	800038c <Send_EP1>
	N_JUMBO_SUBPACKETS_TXED++;	}																	//Report that a new packet will be sent.
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <Manage_EP1_Jumbo+0x50>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <Manage_EP1_Jumbo+0x50>)
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000034 	.word	0x20000034
 8000880:	2000002c 	.word	0x2000002c
 8000884:	20000038 	.word	0x20000038
 8000888:	20000030 	.word	0x20000030

0800088c <USB_LP_CAN1_RX0_IRQHandler>:


//Interrupt functions.

//Function called when an USB reset, error or transmission complete happens. Automatically manage USB reset, error or transmission complete events.
void USB_LP_CAN1_RX0_IRQHandler(void)	{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	if(USB_ISTR & 0x0400) 	{						//If received a USB_RESET..
 8000890:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <USB_LP_CAN1_RX0_IRQHandler+0x14c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000898:	2b00      	cmp	r3, #0
 800089a:	d01e      	beq.n	80008da <USB_LP_CAN1_RX0_IRQHandler+0x4e>
		USB_ISTR  = 0xFBFF;							//Clear flag USB_RESET.
 800089c:	4b4e      	ldr	r3, [pc, #312]	; (80009d8 <USB_LP_CAN1_RX0_IRQHandler+0x14c>)
 800089e:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80008a2:	601a      	str	r2, [r3, #0]
		USB_ENP0R = 0x8280;							//Set endpoint 0 control register to default value. EP0 type = CONTROL.
 80008a4:	4b4d      	ldr	r3, [pc, #308]	; (80009dc <USB_LP_CAN1_RX0_IRQHandler+0x150>)
 80008a6:	f248 2280 	movw	r2, #33408	; 0x8280
 80008aa:	601a      	str	r2, [r3, #0]
		USB_ENP1R = 0x8081;							//Set endpoint 1 control register to default value. EP1 type = BULK. 
 80008ac:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <USB_LP_CAN1_RX0_IRQHandler+0x154>)
 80008ae:	f248 0281 	movw	r2, #32897	; 0x8081
 80008b2:	601a      	str	r2, [r3, #0]
		USB_ENP2R = 0x8682;							//Set endpoint 2 control register to default value. EP2 type = INTERRUPT.
 80008b4:	4b4b      	ldr	r3, [pc, #300]	; (80009e4 <USB_LP_CAN1_RX0_IRQHandler+0x158>)
 80008b6:	f248 6282 	movw	r2, #34434	; 0x8682
 80008ba:	601a      	str	r2, [r3, #0]
		EN_RX_EP0();								//Set endpoint 0 reception to VALID.
 80008bc:	f7ff fc46 	bl	800014c <EN_RX_EP0>
		DIS_TX_EP0();								//Set endpoint 0 transmission to NAK.
 80008c0:	f7ff fc84 	bl	80001cc <DIS_TX_EP0>
		EN_RX_EP1();								//Set endpoint 1 reception to VALID.
 80008c4:	f7ff fd0a 	bl	80002dc <EN_RX_EP1>
		DIS_TX_EP1();								//Set endpoint 1 transmission to NAK.
 80008c8:	f7ff fd48 	bl	800035c <DIS_TX_EP1>
		EN_RX_EP2();								//Set endpoint 2 reception to VALID.
 80008cc:	f7ff fe12 	bl	80004f4 <EN_RX_EP2>
		DIS_TX_EP2();								//Set endpoint 2 transmission to NAK.
 80008d0:	f7ff fe3c 	bl	800054c <DIS_TX_EP2>
		USB_DADDR = 0x0080;							//USB ON. ADDRESS = 0.
 80008d4:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <USB_LP_CAN1_RX0_IRQHandler+0x15c>)
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	601a      	str	r2, [r3, #0]
		}
	
	if(USB_ISTR & 0x2000)	{						//If an error occurred..
 80008da:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <USB_LP_CAN1_RX0_IRQHandler+0x14c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <USB_LP_CAN1_RX0_IRQHandler+0x62>
		USB_ISTR	= 0xDFFF;		}				//Clear error flag.
 80008e6:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <USB_LP_CAN1_RX0_IRQHandler+0x14c>)
 80008e8:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 80008ec:	601a      	str	r2, [r3, #0]
		
	if(USB_ISTR & 0x8000)	{						//If a transmission has been completed correctly..
 80008ee:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <USB_LP_CAN1_RX0_IRQHandler+0x14c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d06b      	beq.n	80009d2 <USB_LP_CAN1_RX0_IRQHandler+0x146>
		if(USB_ENP0R & 0x8000)	{					//If the transmission is EP0 OUT..
 80008fa:	4b38      	ldr	r3, [pc, #224]	; (80009dc <USB_LP_CAN1_RX0_IRQHandler+0x150>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d008      	beq.n	8000918 <USB_LP_CAN1_RX0_IRQHandler+0x8c>
			USB_RECEIVED_EP0=1;						//Set flag received data on EP0.
 8000906:	4b39      	ldr	r3, [pc, #228]	; (80009ec <USB_LP_CAN1_RX0_IRQHandler+0x160>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
			USB_ENP0R = 0x0280; 					//Clear flag CTR_RX. EP0 Control. EP0 ADDR=0.
 800090c:	4b33      	ldr	r3, [pc, #204]	; (80009dc <USB_LP_CAN1_RX0_IRQHandler+0x150>)
 800090e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000912:	601a      	str	r2, [r3, #0]
			DIS_RX_EP0();							//EP0 RX NAK.
 8000914:	f7ff fc2e 	bl	8000174 <DIS_RX_EP0>
			}
		
		if(USB_ENP0R & 0x0080)	{					//If the transmission is EP0 IN..
 8000918:	4b30      	ldr	r3, [pc, #192]	; (80009dc <USB_LP_CAN1_RX0_IRQHandler+0x150>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000920:	2b00      	cmp	r3, #0
 8000922:	d008      	beq.n	8000936 <USB_LP_CAN1_RX0_IRQHandler+0xaa>
			USB_TRANSMITTED_EP0=1;					//Set flag transmitted data on EP0.
 8000924:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <USB_LP_CAN1_RX0_IRQHandler+0x164>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
			USB_ENP0R = 0x8200; 					//EP0 Control. Clear flag CTR_TX. EP0 ADDR=0.
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <USB_LP_CAN1_RX0_IRQHandler+0x150>)
 800092c:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 8000930:	601a      	str	r2, [r3, #0]
			DIS_TX_EP0();							//EP0 TX NAK.
 8000932:	f7ff fc4b 	bl	80001cc <DIS_TX_EP0>
			}
		
		if(USB_ENP1R & 0x8000)	{					//If the transmission is EP1 OUT..
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <USB_LP_CAN1_RX0_IRQHandler+0x154>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d007      	beq.n	8000952 <USB_LP_CAN1_RX0_IRQHandler+0xc6>
			USB_RECEIVED_EP1=1;						//Set flag received data on EP1.
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <USB_LP_CAN1_RX0_IRQHandler+0x168>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
			USB_ENP1R = 0x0081; 					//Clear flag CTR_RX. EP1 Bulk. EP1 ADDR=1.
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <USB_LP_CAN1_RX0_IRQHandler+0x154>)
 800094a:	2281      	movs	r2, #129	; 0x81
 800094c:	601a      	str	r2, [r3, #0]
			DIS_RX_EP1();							//EP1 RX NAK.
 800094e:	f7ff fcd9 	bl	8000304 <DIS_RX_EP1>
			}
		
		if(USB_ENP1R & 0x0080)	{					//If the transmission is è EP1 IN..
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <USB_LP_CAN1_RX0_IRQHandler+0x154>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	2b00      	cmp	r3, #0
 800095c:	d01b      	beq.n	8000996 <USB_LP_CAN1_RX0_IRQHandler+0x10a>
			USB_TRANSMITTED_EP1=1;					//Set flag transmitted data on EP1.
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <USB_LP_CAN1_RX0_IRQHandler+0x16c>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
			USB_ENP1R = 0x8001; 					//EP1 Bulk. Clear flag CTR_TX. EP1 ADDR=1.
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <USB_LP_CAN1_RX0_IRQHandler+0x154>)
 8000966:	f248 0201 	movw	r2, #32769	; 0x8001
 800096a:	601a      	str	r2, [r3, #0]
			DIS_TX_EP1();							//EP1 TX NAK.
 800096c:	f7ff fcf6 	bl	800035c <DIS_TX_EP1>
			if(N_JUMBO_SUBPACKETS>1)		{		//If any jumbo subpacket still need to be transmitted..
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <USB_LP_CAN1_RX0_IRQHandler+0x170>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d907      	bls.n	8000988 <USB_LP_CAN1_RX0_IRQHandler+0xfc>
				N_JUMBO_SUBPACKETS--;				//Report that a new packet has been transmitted.
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <USB_LP_CAN1_RX0_IRQHandler+0x170>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3b01      	subs	r3, #1
 800097e:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <USB_LP_CAN1_RX0_IRQHandler+0x170>)
 8000980:	6013      	str	r3, [r2, #0]
				Manage_EP1_Jumbo();			}		//Manage the transmission of the new jumbo subpacket.
 8000982:	f7ff ff59 	bl	8000838 <Manage_EP1_Jumbo>
 8000986:	e006      	b.n	8000996 <USB_LP_CAN1_RX0_IRQHandler+0x10a>
			else if (N_JUMBO_SUBPACKETS==1)	{		//If the last jumbo subpacket has been completely transmitted..
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <USB_LP_CAN1_RX0_IRQHandler+0x170>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d102      	bne.n	8000996 <USB_LP_CAN1_RX0_IRQHandler+0x10a>
				N_JUMBO_SUBPACKETS=0;		}	}	//Report that there isn't any jumbo subpacket to be transmitted.
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <USB_LP_CAN1_RX0_IRQHandler+0x170>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
		
		if(USB_ENP2R & 0x8000)	{					//If the transmission is EP2 OUT..
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <USB_LP_CAN1_RX0_IRQHandler+0x158>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d008      	beq.n	80009b4 <USB_LP_CAN1_RX0_IRQHandler+0x128>
			USB_RECEIVED_EP2=1;						//Set flag transmitted data on EP2.
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <USB_LP_CAN1_RX0_IRQHandler+0x174>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
			USB_ENP2R = 0x0682; 					//Clear flag CTR_RX. EP2 Interrupt. EP2 ADDR=2.
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <USB_LP_CAN1_RX0_IRQHandler+0x158>)
 80009aa:	f240 6282 	movw	r2, #1666	; 0x682
 80009ae:	601a      	str	r2, [r3, #0]
			DIS_RX_EP2();							//EP2 RX NAK.
 80009b0:	f7ff fdb4 	bl	800051c <DIS_RX_EP2>
			}
		
		if(USB_ENP2R & 0x0080)	{					//If the transmission is EP2 IN..
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <USB_LP_CAN1_RX0_IRQHandler+0x158>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d008      	beq.n	80009d2 <USB_LP_CAN1_RX0_IRQHandler+0x146>
			USB_TRANSMITTED_EP2=1;					//Set flag transmitted data on EP1.
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <USB_LP_CAN1_RX0_IRQHandler+0x178>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	701a      	strb	r2, [r3, #0]
			USB_ENP2R = 0x8602; 					//EP2 Interrupt. Clear flag CTR_TX. EP2 ADDR=2.
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <USB_LP_CAN1_RX0_IRQHandler+0x158>)
 80009c8:	f248 6202 	movw	r2, #34306	; 0x8602
 80009cc:	601a      	str	r2, [r3, #0]
			DIS_TX_EP2();							//EP2 TX NAK.
 80009ce:	f7ff fdbd 	bl	800054c <DIS_TX_EP2>
		
	
	
	}												//End CTR.

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40005c44 	.word	0x40005c44
 80009dc:	40005c00 	.word	0x40005c00
 80009e0:	40005c04 	.word	0x40005c04
 80009e4:	40005c08 	.word	0x40005c08
 80009e8:	40005c4c 	.word	0x40005c4c
 80009ec:	20000024 	.word	0x20000024
 80009f0:	20000025 	.word	0x20000025
 80009f4:	20000026 	.word	0x20000026
 80009f8:	20000027 	.word	0x20000027
 80009fc:	2000002c 	.word	0x2000002c
 8000a00:	20000028 	.word	0x20000028
 8000a04:	20000029 	.word	0x20000029

08000a08 <main>:
#include "main.h"
#include "RCC_CLOCK.h"
#include "USB-VCP.h"

int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0c2      	sub	sp, #264	; 0x108
 8000a0c:	af00      	add	r7, sp, #0
	uint32_t	ii=0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint8_t		BUFF_TX_VCP[128] = {0};				//Virtual Serial Port Tansmission Buffer.
 8000a14:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f9d9 	bl	8000dd4 <memset>
	uint8_t		BUFF_RX_VCP[128] = {0};				//Virtual Serial Port Reception Buffer.
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4618      	mov	r0, r3
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	f000 f9d2 	bl	8000dd4 <memset>
	uint32_t	VCP_RX_LEN = 0;						//Variable to store the size of received packets.
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
	
	NVIC->ICER[0] = 0xFFFFFFFF;						//Turn off all interrupts.	
 8000a36:	4b82      	ldr	r3, [pc, #520]	; (8000c40 <main+0x238>)
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	ClockInit();									//SYSTEM CLOCK = 72Mhz. AHB CLOCK = 72Mhz. APB1 CLOCK = 36Mhz. APB2 CLOCK = 72Mhz. USB CLOCK = 48Mhz.  
 8000a40:	4b80      	ldr	r3, [pc, #512]	; (8000c44 <main+0x23c>)
 8000a42:	2212      	movs	r2, #18
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	bf00      	nop
 8000a48:	4b7e      	ldr	r3, [pc, #504]	; (8000c44 <main+0x23c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f9      	beq.n	8000a48 <main+0x40>
 8000a54:	4b7c      	ldr	r3, [pc, #496]	; (8000c48 <main+0x240>)
 8000a56:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	4b7b      	ldr	r3, [pc, #492]	; (8000c4c <main+0x244>)
 8000a5e:	4a7c      	ldr	r2, [pc, #496]	; (8000c50 <main+0x248>)
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	bf00      	nop
 8000a64:	4b79      	ldr	r3, [pc, #484]	; (8000c4c <main+0x244>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f003 0302 	and.w	r3, r3, #2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0f9      	beq.n	8000a64 <main+0x5c>
 8000a70:	bf00      	nop
 8000a72:	4b76      	ldr	r3, [pc, #472]	; (8000c4c <main+0x244>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0f9      	beq.n	8000a72 <main+0x6a>
 8000a7e:	4b75      	ldr	r3, [pc, #468]	; (8000c54 <main+0x24c>)
 8000a80:	4a75      	ldr	r2, [pc, #468]	; (8000c58 <main+0x250>)
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	bf00      	nop
 8000a86:	4b73      	ldr	r3, [pc, #460]	; (8000c54 <main+0x24c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1f9      	bne.n	8000a86 <main+0x7e>
 8000a92:	4b6e      	ldr	r3, [pc, #440]	; (8000c4c <main+0x244>)
 8000a94:	4a71      	ldr	r2, [pc, #452]	; (8000c5c <main+0x254>)
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	bf00      	nop
 8000a9a:	4b6c      	ldr	r3, [pc, #432]	; (8000c4c <main+0x244>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f9      	beq.n	8000a9a <main+0x92>
 8000aa6:	4b6b      	ldr	r3, [pc, #428]	; (8000c54 <main+0x24c>)
 8000aa8:	4a6d      	ldr	r2, [pc, #436]	; (8000c60 <main+0x258>)
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	bf00      	nop
 8000aae:	4b69      	ldr	r3, [pc, #420]	; (8000c54 <main+0x24c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	2b0a      	cmp	r3, #10
 8000ab8:	d1f9      	bne.n	8000aae <main+0xa6>
 8000aba:	4b63      	ldr	r3, [pc, #396]	; (8000c48 <main+0x240>)
 8000abc:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ac0:	601a      	str	r2, [r3, #0]
	USBInit();
 8000ac2:	4b64      	ldr	r3, [pc, #400]	; (8000c54 <main+0x24c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a63      	ldr	r2, [pc, #396]	; (8000c54 <main+0x24c>)
 8000ac8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	4b65      	ldr	r3, [pc, #404]	; (8000c64 <main+0x25c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a64      	ldr	r2, [pc, #400]	; (8000c64 <main+0x25c>)
 8000ad4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	4b63      	ldr	r3, [pc, #396]	; (8000c68 <main+0x260>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a62      	ldr	r2, [pc, #392]	; (8000c68 <main+0x260>)
 8000ae0:	f043 0305 	orr.w	r3, r3, #5
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	4b61      	ldr	r3, [pc, #388]	; (8000c6c <main+0x264>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a60      	ldr	r2, [pc, #384]	; (8000c6c <main+0x264>)
 8000aec:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	4b5e      	ldr	r3, [pc, #376]	; (8000c6c <main+0x264>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a5d      	ldr	r2, [pc, #372]	; (8000c6c <main+0x264>)
 8000af8:	f443 2388 	orr.w	r3, r3, #278528	; 0x44000
 8000afc:	6013      	str	r3, [r2, #0]
 8000afe:	4b5c      	ldr	r3, [pc, #368]	; (8000c70 <main+0x268>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	4b5b      	ldr	r3, [pc, #364]	; (8000c74 <main+0x26c>)
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	4b5b      	ldr	r3, [pc, #364]	; (8000c78 <main+0x270>)
 8000b0c:	2240      	movs	r2, #64	; 0x40
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	4b5a      	ldr	r3, [pc, #360]	; (8000c7c <main+0x274>)
 8000b12:	2240      	movs	r2, #64	; 0x40
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	4b5a      	ldr	r3, [pc, #360]	; (8000c80 <main+0x278>)
 8000b18:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <main+0x27c>)
 8000b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	4b58      	ldr	r3, [pc, #352]	; (8000c88 <main+0x280>)
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	4b57      	ldr	r3, [pc, #348]	; (8000c8c <main+0x284>)
 8000b2e:	22c0      	movs	r2, #192	; 0xc0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	4b57      	ldr	r3, [pc, #348]	; (8000c90 <main+0x288>)
 8000b34:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	4b56      	ldr	r3, [pc, #344]	; (8000c94 <main+0x28c>)
 8000b3c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	4b55      	ldr	r3, [pc, #340]	; (8000c98 <main+0x290>)
 8000b44:	2208      	movs	r2, #8
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <main+0x294>)
 8000b4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	4b53      	ldr	r3, [pc, #332]	; (8000ca0 <main+0x298>)
 8000b52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	4b52      	ldr	r3, [pc, #328]	; (8000ca4 <main+0x29c>)
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	4b51      	ldr	r3, [pc, #324]	; (8000ca4 <main+0x29c>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	4b50      	ldr	r3, [pc, #320]	; (8000ca8 <main+0x2a0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e004      	b.n	8000b76 <main+0x16e>
 8000b6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ca8 <main+0x2a0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	4a4d      	ldr	r2, [pc, #308]	; (8000ca8 <main+0x2a0>)
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	4b4c      	ldr	r3, [pc, #304]	; (8000ca8 <main+0x2a0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b1d      	cmp	r3, #29
 8000b7c:	d9f6      	bls.n	8000b6c <main+0x164>
 8000b7e:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <main+0x29c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	4b49      	ldr	r3, [pc, #292]	; (8000cac <main+0x2a4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <main+0x29c>)
 8000b8c:	f44f 4274 	mov.w	r2, #62464	; 0xf400
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <main+0x238>)
 8000b94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	4b45      	ldr	r3, [pc, #276]	; (8000cb0 <main+0x2a8>)
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	601a      	str	r2, [r3, #0]
	
	for(ii=0;ii<5;ii++) {BUFF_TX_VCP[ii]=ii+1;}
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000ba6:	e010      	b.n	8000bca <main+0x1c2>
 8000ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b2d9      	uxtb	r1, r3
 8000bb2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000bba:	4413      	add	r3, r2
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d9ea      	bls.n	8000ba8 <main+0x1a0>


	while(1)	{
		
		USB_MANAGEMENT();							//Function that manage the USB peripheral and USB control transfers on endpoint 0.
 8000bd2:	f7ff fcd3 	bl	800057c <USB_MANAGEMENT>
		
		if(VCP_Received)	{						//If a packes has been received..
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <main+0x2ac>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f8      	beq.n	8000bd2 <main+0x1ca>
			
			Read_VCP(BUFF_RX_VCP,&VCP_RX_LEN);		//Read the packet and store it in the reception buffer "BUFF_RX_VCP". The lenght of the packet will be written inside the variable VCP_RX_LEN.
 8000be0:	463a      	mov	r2, r7
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fc3e 	bl	8000468 <Read_EP1>
			
			for(ii=0;ii<VCP_RX_LEN;ii++)	{		//Copy the received data to the transmission buffer "BUFF_TX_VCP".
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000bf2:	e010      	b.n	8000c16 <main+0x20e>
				BUFF_TX_VCP[ii]=BUFF_RX_VCP[ii]; }
 8000bf4:	1d3a      	adds	r2, r7, #4
 8000bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000bfa:	4413      	add	r3, r2
 8000bfc:	7819      	ldrb	r1, [r3, #0]
 8000bfe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c06:	4413      	add	r3, r2
 8000c08:	460a      	mov	r2, r1
 8000c0a:	701a      	strb	r2, [r3, #0]
			for(ii=0;ii<VCP_RX_LEN;ii++)	{		//Copy the received data to the transmission buffer "BUFF_TX_VCP".
 8000c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c10:	3301      	adds	r3, #1
 8000c12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000c16:	463b      	mov	r3, r7
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d3e8      	bcc.n	8000bf4 <main+0x1ec>
			
			Write_VCP(BUFF_TX_VCP,VCP_RX_LEN);		//Send the packet through the USB VCP.
 8000c22:	463b      	mov	r3, r7
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fbdf 	bl	80003f0 <Send_EP1_Jumbo>
			
			Wait_VCP_TX();	}						//Wait until the packt has been completely sent.
 8000c32:	bf00      	nop
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <main+0x2b0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1fb      	bne.n	8000c34 <main+0x22c>
		USB_MANAGEMENT();							//Function that manage the USB peripheral and USB control transfers on endpoint 0.
 8000c3c:	e7c9      	b.n	8000bd2 <main+0x1ca>
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	40022000 	.word	0x40022000
 8000c48:	40021008 	.word	0x40021008
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	00010081 	.word	0x00010081
 8000c54:	40021004 	.word	0x40021004
 8000c58:	001d0400 	.word	0x001d0400
 8000c5c:	01010081 	.word	0x01010081
 8000c60:	001d0402 	.word	0x001d0402
 8000c64:	4002101c 	.word	0x4002101c
 8000c68:	40021018 	.word	0x40021018
 8000c6c:	40010804 	.word	0x40010804
 8000c70:	40005c50 	.word	0x40005c50
 8000c74:	40006000 	.word	0x40006000
 8000c78:	40006004 	.word	0x40006004
 8000c7c:	40006008 	.word	0x40006008
 8000c80:	4000600c 	.word	0x4000600c
 8000c84:	40006010 	.word	0x40006010
 8000c88:	40006014 	.word	0x40006014
 8000c8c:	40006018 	.word	0x40006018
 8000c90:	4000601c 	.word	0x4000601c
 8000c94:	40006020 	.word	0x40006020
 8000c98:	40006024 	.word	0x40006024
 8000c9c:	40006028 	.word	0x40006028
 8000ca0:	4000602c 	.word	0x4000602c
 8000ca4:	40005c40 	.word	0x40005c40
 8000ca8:	20000020 	.word	0x20000020
 8000cac:	40005c44 	.word	0x40005c44
 8000cb0:	40005c4c 	.word	0x40005c4c
 8000cb4:	20000026 	.word	0x20000026
 8000cb8:	2000002c 	.word	0x2000002c

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <HardFault_Handler+0x4>

08000cce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <MemManage_Handler+0x4>

08000cd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <BusFault_Handler+0x4>

08000cda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <UsageFault_Handler+0x4>

08000ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f82e 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d1e:	e003      	b.n	8000d28 <LoopCopyDataInit>

08000d20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d26:	3104      	adds	r1, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d30:	d3f6      	bcc.n	8000d20 <CopyDataInit>
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d34:	e002      	b.n	8000d3c <LoopFillZerobss>

08000d36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d38:	f842 3b04 	str.w	r3, [r2], #4

08000d3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d40:	d3f9      	bcc.n	8000d36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d42:	f7ff ffe5 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f000 f821 	bl	8000d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d4a:	f7ff fe5d 	bl	8000a08 <main>
  bx lr
 8000d4e:	4770      	bx	lr
  ldr r3, =_sidata
 8000d50:	08000e5c 	.word	0x08000e5c
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d58:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000d5c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000d60:	2000004c 	.word	0x2000004c

08000d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_2_IRQHandler>
	...

08000d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_IncTick+0x1c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_IncTick+0x20>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a03      	ldr	r2, [pc, #12]	; (8000d88 <HAL_IncTick+0x20>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000048 	.word	0x20000048

08000d8c <__libc_init_array>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	2500      	movs	r5, #0
 8000d90:	4e0c      	ldr	r6, [pc, #48]	; (8000dc4 <__libc_init_array+0x38>)
 8000d92:	4c0d      	ldr	r4, [pc, #52]	; (8000dc8 <__libc_init_array+0x3c>)
 8000d94:	1ba4      	subs	r4, r4, r6
 8000d96:	10a4      	asrs	r4, r4, #2
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	d109      	bne.n	8000db0 <__libc_init_array+0x24>
 8000d9c:	f000 f822 	bl	8000de4 <_init>
 8000da0:	2500      	movs	r5, #0
 8000da2:	4e0a      	ldr	r6, [pc, #40]	; (8000dcc <__libc_init_array+0x40>)
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <__libc_init_array+0x44>)
 8000da6:	1ba4      	subs	r4, r4, r6
 8000da8:	10a4      	asrs	r4, r4, #2
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d105      	bne.n	8000dba <__libc_init_array+0x2e>
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db4:	4798      	blx	r3
 8000db6:	3501      	adds	r5, #1
 8000db8:	e7ee      	b.n	8000d98 <__libc_init_array+0xc>
 8000dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dbe:	4798      	blx	r3
 8000dc0:	3501      	adds	r5, #1
 8000dc2:	e7f2      	b.n	8000daa <__libc_init_array+0x1e>
 8000dc4:	08000e54 	.word	0x08000e54
 8000dc8:	08000e54 	.word	0x08000e54
 8000dcc:	08000e54 	.word	0x08000e54
 8000dd0:	08000e58 	.word	0x08000e58

08000dd4 <memset>:
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4402      	add	r2, r0
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d100      	bne.n	8000dde <memset+0xa>
 8000ddc:	4770      	bx	lr
 8000dde:	f803 1b01 	strb.w	r1, [r3], #1
 8000de2:	e7f9      	b.n	8000dd8 <memset+0x4>

08000de4 <_init>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr

08000df0 <_fini>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	bf00      	nop
 8000df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df6:	bc08      	pop	{r3}
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4770      	bx	lr
